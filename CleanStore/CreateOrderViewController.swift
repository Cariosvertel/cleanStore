//
//  CreateOrderViewController.swift
//  CleanStore
//
//  Created by Carlos Rios on 7/21/16.
//  Copyright (c) 2016 Refundo Inc. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol CreateOrderViewControllerInput
{
  func displaySomething(viewModel: CreateOrderViewModel)
}

protocol CreateOrderViewControllerOutput
{
  func doSomething(request: CreateOrderRequest)
}

class CreateOrderViewController: UITableViewController, CreateOrderViewControllerInput, UITextFieldDelegate
{
    @IBOutlet var allTextFields: [UITextField]!
    @IBOutlet weak var shippingSpeed: UITextField!
    @IBOutlet weak var expDate: UITextField!
    @IBOutlet weak var shippingMethodPicker: UIPickerView!
    @IBOutlet weak var expDatePicker: UIDatePicker!
    
    
  var output: CreateOrderViewControllerOutput!
  var router: CreateOrderRouter!
  
  // MARK: Object lifecycle
  
  override func awakeFromNib()
  {
    super.awakeFromNib()
    CreateOrderConfigurator.sharedInstance.configure(self)
    
    // connect delegates for TextFields
    for textField in allTextFields{
        textField.delegate = self;
    }
    
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomethingOnLoad()
  }
  
  // MARK: Event handling
  
  func doSomethingOnLoad()
  {
    // NOTE: Ask the Interactor to do some work
    
    let request = CreateOrderRequest()
    output.doSomething(request)
  }
  
  // MARK: Display logic
  
  func displaySomething(viewModel: CreateOrderViewModel)
  {
    // NOTE: Display the result from the Presenter
    
    // nameTextField.text = viewModel.name
  }
    
// MARK: Delegates methods
    func textFieldShouldReturn(textField: UITextField) -> Bool
    {
        textField.resignFirstResponder()
        if let index = allTextFields. {
            if index < allTextFields.count - 1 {
                let nextTextField = allTextFields[index + 1]
                nextTextField.becomeFirstResponder()
            }
        }
        return true
    }
}
